Clean up branches

Make all directory paths relative. Set a base path in settings and concatenate anything
additional on to this base.

Move settings.clj outside of the src/splice directory

Only print new-density message when density changes. Perhaps have an option to have it
printed every time it is computed or only when it changes

Set log settings (dir and level) for sc-osc

Be able to pass in a settings file to splice-start that will overwrite/add to settings in
the default settings file

Add midi functions from overtone/src/overtone/midi.clj
and/or overtone/src/overtone/studio/midi.clj (possibly do this)

Change println(s) to data2 level log statements - need to make sure
details print - not just Object IDs

check if I want to use blocking or unblocking channels in ensemble_status.clj
currently I use blocking channels if I want to switch to unblocking channels, change
(chan (* 2 (get-setting :num-players))) to (chan (buffer(* 2 (get-setting :num-players))))

If an instrument has a variable release, like woosh, it needs to be taken into account
when scheduling note-off events or even just when calling get-release-millis-from-instrument.
Perhaps remove variable release's and instead add a param so the release can be set by
splice when the synth is played and not changed inside the synth. That way you can always
retrieve the correct release time from the synth

Should there be a limit to the number of times player_play_note/check_prior_event_note_off
should be able to recur?

-------- STOPPING SPLICE --------
- Create a fade-out function that brings the value of volume-adjust down to 0 over a short
  amount of time
- Should Supercollider be stopped?
- perhaps instead of scheduling a final rest event to stop all notes, it might be
  possible to stop scheduling and then check the last melody event for each player, and
  if there is an sc-instrument-id and note-off is not true then schedule a note off for
  that sc-instrument-id for right now. This will still not stop the last notes that were
  scheduled calling play-next-note (while is-scheduling? is false).
- Can a splice-pause be created that will pick up where it left off? How will the times
  (event-time, play-time) be effected. Also, since all notes should be stopped, checking
  for prior-note-off should not be done.

-------- LONG TERM --------

- Create a way to solo a specific loop number. Perhaps create a function that sets a param
  in settings that can be checked each time a note is played.
- Can make all instruments use the Env function and have the length of the node set. If
  instruments are created like this, the program might need to send gote-off messages. Instead,
  each wnvelope would end on its own after the desired length. Need to check if this could
  work.
- Make pan a standard third param for synths
- Connect mediapipe to supercollider automatically
- Start up supercollider automatically.
- Find a way to keep 1 synth playing and have the loop be just changing param(s). Perhaps
  use a :no-release param to have the synth keep playing. Noeed a way to indicate when
  to release the synth.
- Do not make a new synth for every note keep 1 synth and retrigger it
- Learn how to use buffers for samples
- Might want to change melody-info to a record and have accessor methods for the attributes
  instead of passing around a map
- Do I want to move all vars from individual files to a common file so that if I reload the
  file I will not loose the value of the vars? Could this be fixwd using defonce and/or
  have functions for clearing vars?
- Have the ability to load new loop file while playing
- Ability to control loop file from an external controller (grid controller)
