Add midi functions from overtone/src/overtone/midi.clj
  and/or overtone/src/overtone/studio/midi.clj (possibly do this)

Implement core/splice_stop and control/stop_splice

if the message system is used, make certain ensemble/ensemble_status.clj catches the message
  and calls stop-ensemble-status to stop the ensemble-status message loop.

Set log settings (dir and level for sc-osc

need to fix clj-osc location in sc-osc/deps.edn

check if I want to use blocking or unblocking channels in ensemble_status.clj
currently I use blocking channels if I want to switch to unblocking channels, change
(chan (* 2 (get-setting :num-players))) to (chan (buffer(* 2 (get-setting :num-players))))

If an instrument has a variable release, like woosh, it needs to be taken into account when scheduling
note-off events or even just when calling get-release-millis-from-instrument. Perhaps remove
variable release's and instead add a param so the release can be set by splice when the synth
is played and not changed inside the synth. That way you can always retrieve the correct
release time from the synth

Change synths to use OffsetOut

Take attack into account for note-length. Perhaps add atack into instrument.clj.
If attack can be changed, have the program look it up like it does with release, but
at first just set the attack: var in instrument.clj to :variable. If attack is variable
in loops.clj :instrument-settings, it might be necessary to look up attack all the
time.

Should there be a limit to the number of times player_play_note/check_prior_event_note_off
should be able to recur?

Change println(s) to data2 level log statements - need to make sure details print -not just Object IDs

-------- LONG TERM --------

Do not make a new synth for every note keep 1 synth and retrigger it
Move sc-osc to a seperate repo and use submodules
Might want to change melody-info to a record and have accessor methods for the attributes
  instead of passing around a map
