- Look at use of >!! in player_play_note.clj
- multiplying-loop - Be able to have a variable number of multiplying-loops
- multiplying-loop - It might be possible to start a new loop at the exact same time as the
  original loop if you send both commands to supercollider in the same bundle
- When creating multiplying-loop in player.clj only use required loop params for :melody-info.
  I believe that currently all melody-info params are passed including multiplying-loop
  params.
- Occasionally get msg "Couldn't clear msgs for player - Retrying" look into why
- Clean up branches
- Currently in a score in the :pitch map if it is a single pitch the pitch has the key
  :pitch-freq or "pitch-midi-note. It it is variable (with multiple keys there is a key
  :pitch-type which is either :midi-note or :freq and a key :pitches. Perhaps this should
  be standardized to always be like variable pitches. Each :pitch map will have the keys
  :type (:fixed | :variable |:rest) :pitch-type (:midi-note | :freq) and :pitch or :pitches.
- Make all directory paths relative. Set a base path in settings and concatenate anything
  additional on to this base.
- Set log settings (dir and level) for sc-osc
- Be able to pass in a settings file to splice-start that will overwrite/add to settings in
  the default settings file
- Add midi functions from overtone/src/overtone/midi.clj
  and/or overtone/src/overtone/studio/midi.clj (possibly do this)
- Change println(s) to data2 level log statements - need to make sure
  details print - not just Object IDs
- check if I want to use blocking or unblocking channels in ensemble_status.clj
  currently I use blocking channels if I want to switch to unblocking channels, change
  (chan (* 2 (get-setting :num-players))) to (chan (buffer(* 2 (get-setting :num-players))))
- If an instrument has a variable release, like woosh, it needs to be taken into account
  when scheduling note-off events or even just when calling get-release-millis-from-instrument.
  Perhaps remove variable release's and instead add a param so the release can be set by
  splice when the synth is played and not changed inside the synth. That way you can always
  retrieve the correct release time from the synth
- Should there be a limit to the number of times player_play_note/check_prior_event_note_off
  should be able to recur?


-------- BUGS/ERRORS --------
- Sometime player-play-note.clj/process-cancel-response-msg will get into an infinite
  loop recurring (Recuring x times waiting for instrument groups to clear) currently
  happens with loops1 in test-scores sith 4 sec attack and 3 sec release. Also, happens
  occasionally with splice-compositions/compositions/0000-initial-loops.clj.
- need to look at the ensemble implementation. If dosync is implemented correctly in
  player-play-note/play-next-note (at top of fn) the entire ensemble will be locked everytime
  any player wants to play a note. It should be implemented so only a specific player and/or
  melody is locked at a time. If we do not use a dosync in play-next-note it could be possible
  for multiple threads to update a specific player, for example, and some of the changes
  will get overwritten with old data.
- If splice-stop occurs while checking the prior event note off, it can enter an infinite
  recur loop - WARN:  %%%%%%%% ABOUT TO RECUR check-prior-event-note-off player-id: 0 %%%%%%%%
- If splice-stop is run when splice is not playing, splice cannot start again
- There seem to be clicks or static in the rhodes-piano.sc instruments
- Look into all the late messages in the supercollider terminal

-------- STOPPING SPLICE --------
- Create a fade-out function that brings the value of volume-adjust down to 0 over a short
  amount of time
- Should Supercollider be stopped?
- Can a splice-pause be created that will pick up where it left off? How will the times
  (event-time, play-time) be effected. Also, since all notes should be stopped, checking
  for prior-note-off should not be done.


-------- LONG TERM --------

--  FEATURES

- Allow an initial delay param for each individual loop - overrides min/max-start-offset
  for this loop only - this is already implemented for multiplying loops
  (min/max-new-loop-delay-ms)
- Create a loop param for number of times to repeat the loop.
- Create a way to solo or mute a specific loop number. Perhaps create a function that sets a
  param in settings that can be checked each time a note is played.
- Create  a param for each loop tht allows the loop to be transposed up or down
- Create  a param for each loop tht allows the loop to be sped up or slowed down
- Do I need an "active" indicator for each loop, or can this be accomplished with the
  solo and mute functions. This is to have some loops "inactive" (or maybe muted) to start
- allow :never to settings.py print-ensemble-density
- Create a "global multiplier" indicator. This will allow all times to be multiplied by some
  value (2x, 0.5x etc...). Would this valuable at a loop level so each loop could have its'
  own multiplier value.
  This is partially implemented in base-loop.clj with global-dur-multiplier
  Would it be good to have an "ignore global multiplier" setting for each loop so that
  individual loop would not have its times multiplied?
  Would it be a good idea to do the same thing with frequency?
- Have the ability to sync specific events of one or more loops together
- Ability to specify durations in beats
- If beats can be specified as dur need to allow global-dur-mult to be set to beats


-- ARCHITECTURE

- Can make all instruments use the Env function and have the length of the node set. If
  instruments are created like this, the program might need to send gote-off messages. Instead,
  each wnvelope would end on its own after the desired length. Need to check if this could
  work.
- Make pan a standard third param for synths
- Start up supercollider automatically.
- Connect mediapipe to supercollider automatically
- Make splice a server with an api
- Find a way to keep 1 synth playing and have the loop be just changing param(s). Perhaps
  use a :no-release param to have the synth keep playing. Noeed a way to indicate when
  to release the synth.
- Do not make a new synth for every note keep 1 synth and retrigger it
- Learn how to use buffers for samples
- Might want to change melody-info to a record and have accessor methods for the attributes
  instead of passing around a map
- Do I want to move all vars from individual files to a common file so that if I reload the
  file I will not loose the value of the vars? Could this be fixwd using defonce and/or
  have functions for clearing vars?
- Have the ability to load new loop file while playing
- Ability to control loop file from an external controller (grid controller)


-------- MUSIC --------
- Have a loop (or part of a loop) with a descending bass line in long tones.
