Some SuperCollider commands to try out SendReply on a remote server

sc3> o = ServerOptions.new;
-> a ServerOptions
sc3> o.protocol_(\udp);
-> a ServerOptions
sc3> t = Server.remote(\remote, NetAddr("127.0.0.1", 57711), o);
remote : setting clientID to 0.
-> remote
sc3> Requested notification messages from server 'remote'
remote: server process has maxLogins 8 - adjusting my options accordingly.
remote: setting clientID to 2, as obtained from server process.
remote : setting clientID to 2.

sc3>  ({ SendReply.kr(Impulse.kr(3), '/the_answer', [40, 41, 42, 43] + MouseX.kr, 1905); }.play(t); )
-> Synth('temp__0' : 134218728)
sc3> u = OSCFunc({ |msg| msg.postln }, '/the_answer');
-> OSCFunc(/the_answer, nil, nil, nil)
sc3> [ /the_answer, 134218728, 1905, 40.250522613525, 41.250522613525, 42.250522613525, 43.250522613525 ]
repeats.........


---- To get the number of control bus channels from the server ----
From a bash prompt, start sclang
sc3> t = Server.remote(\remote, NetAddr("127.0.0.1", 57711), ServerOptions.new);
sc3> ({ SendReply.kr(Impulse.kr(0.5), '/num_control_bus_channels', t.options.numControlBusChannels, 1905); }.play(t); );
sc3> u = OSCFunc({ |msg| msg.postln }, '/num_control_bus_channels');
Starts repeatedly printing a response. Last array element is number of control bus channels


---------- Connecting to a running supercollider server from scide ----------

Server.default.addr.port = 57711;
o = ServerOptions.new;
o.maxLogins = 8;
r = Server.remote(\myserver, NetAddr("127.0.0.1", 57711), o);
Server.default = r;
r.plotTree


---------- Work on sending a literal array when creating a synth ----------

*** This is not working yet and is does not seem to be supported by sc-osc ***

user=> (use 'sc-osc.sc)
user=> (sc-connect)
user=> (sc-debug true)
user=> (def synth-file "/home/joseph/src/clj/splice/src/splice/instr/instruments/sc/tst-string.scsyndef")
user=> (use 'splice.sc.sc-constants)
user=> (sc-with-server-sync #(sc-send-msg "/d_load" synth-file))


user=> (sc-send-msg "/s_new" "tst-string" 1000 tail 0 )
user=> (sc-send-msg "/s_new" "tst-string" 1000 tail 0 "out" "#[0 1]")
user=> (sc-send-msg "/s_new" "tst-string" 1000 tail 0 "out" (byte-array [0 1]))

Yes, you can also send the SuperCollider literal array as part of the "/s_new" OSC message itself, without the need for separate "/n_set" messages. To do this, you can include the array as a single argument using the OSC blob type.

Here's an example OSC message that creates an instance of the "mySynth" synth and sets the myArray argument to [440, 660] using a blob:

python

// Create the synth with the "mySynth" name and ID 1000, and set the "myArray" argument to [440, 660]
/s_new mySynth 1000 0 1 myArray #bundle[f, 440, f, 660]

In this example, the myArray argument is set to a #bundle OSC blob that contains the two float values 440 and 660. The blob is created using the #bundle array notation, which specifies the type of data in the blob (f for float) followed by the actual values of the array.


Add a synths output to another bus
// Create two audio buses
s.boot;
(
    {
        var bus1 = Bus.audio(s, 1);
        var bus2 = Bus.audio(s, 1);

        // Create a synth that outputs to bus1 and adds its output to bus2
        SynthDef(\example, {
            arg out = 0;
            var sig = SinOsc.ar(440, 0, 0.1);
            OffsetOut.ar(out, sig, bus2);
        }).add;

        // Create a synth instance and set its output to bus1
        var synth = Synth(\example, [\out, bus1]);

        // Create a synth that plays bus1
        SynthDef(\player, {
            arg out = 0;
            var sig = In.ar(bus1, 1);
            Out.ar(out, sig);
        }).add;

        var player = Synth(\player, [\out, 0]);

        // Create a synth that plays bus2
        SynthDef(\monitor, {
            arg out = 0;
            var sig = In.ar(bus2, 1);
            Out.ar(out, sig);
        }).add;

        var monitor = Synth(\monitor, [\out, 1]);

        // Free the synths and buses after 2 seconds
        2.wait;
        synth.free;
        player.free;
        monitor.free;
        bus1.free;
        bus2.free;
    }.fork;
)


Copy the synths output to another bus
s.boot;

// Define a SynthDef that outputs to bus 0
(
SynthDef(\example, {
    var sig = SinOsc.ar(440, 0, 0.1);
    Out.ar(0, sig);
}).add;
)

// Create a Synth that uses the SynthDef defined above
var synth = Synth(\example);

// Create a new bus and assign the Synth to it
var newBus = Bus.audio(s, 1);
synth.set(\out, newBus);

// Start the Synth
synth.play;

// Wait for 1 second
1.wait;

// Add an OffsetOut to send the Synth's output to bus 0 as well
OffsetOut.ar(0, synth, 0.5);

// Wait for 1 second
1.wait;

// Remove the OffsetOut to stop sending the Synth's output to bus 0
OffsetOut.ar(0, synth, 0);

// Free the Synth and the bus
synth.free;
newBus.free;



---------- play next noteprocess - not done and likely needs to be updated


player_play_note/play-next-note
  player-utils/get-next-melody-event
    melody-fn from loop-structure
      | returns dur-info in     |
      | the melody-event that   |
      | contains the note       |
      | duration from the loop  |
      | file (entire dur of     |
      | note from start to end  |
      | release)                |
  play-melody-event
    play-note-new-instrument       or    play_note_prior_instrument  or  get-note-off-from-melody-event
     |plays note with new inst  |
     |using time stamped bundle |
   get-release-millis-from-instrument
     |uses /s_get to get release|
     | param value              |
   set-play-info
     |sets some keys in melody  |
     | event that were not      |
     | available yet incl       |
     | play-time and note-off   |
     | (is note-off required)   |
   async schedules note off - instead of scheduling this, it can be
                              sent as a timestamped bundle immediately
 update-melody-with-event
 check-prior-event-note-off
     | this is carryover from   |
     | when instruments could   |
     | change. Makes sure if    |
     | inst changed the prior   |
     | inst is turned off       |
 ensemble/update-player-and-melody
     | updates player and melody|
     | in ensemble              |
 player_play_note/sched-next-note
     |async schedules next note |
     | based on event-time +    |
     | dur-millis +             |
     | process-millis           |


---------- working to get sc-send-bundle working

user=> (use 'sc-osc.sc)
user=> (ns sc-osc.sc)
sc-osc.sc=> (sc-connect)
sc-osc.sc=> (sc-debug true)
sc-osc.sc=> (sc-with-server-sync #(sc-send-msg "/d_load" "/home/joseph/src/clj/splice/src/splice/instr/instruments/sc/gong.scsyndef"))
sc-osc.sc=> (sc-send-bundle (+ (sc-now) 4000) (server-snd "/s_new" "gong" 1003 0 0))

---------- new get release info technique

In clojure, if I send an osc bundle to a supercollider server to retreive the value of a synth param at some point in the future, how can I retreive the value when the supercollider server returns it, wthout blocking until supercollider returns the value

In Clojure, you can use a similar approach as I mentioned earlier for handling the result of a function call that's executed in the future, using a callback function or message passing system.

For example, you could send the OSC bundle to the SuperCollider server using a library like overtone.osc or scsynth.client, and then use a message passing system like core.async to handle the result when it becomes available.

Here's an example using core.async:

clojure

(require '[clojure.core.async :as async]
         '[overtone.osc :as osc])

(defn send-osc-bundle [bundle channel]
  (osc/send-bundle bundle)
  (async/>!! channel :sent))

(let [result-chan (async/chan)]
  (send-osc-bundle my-bundle result-chan)
  (println "Processing other stuff...")
  (async/go (let [result (async/<!! result-chan)]
              (println "Result: " result)))))

In this example, the send-osc-bundle function takes two arguments: the OSC bundle to send and a channel. It sends the OSC bundle to the SuperCollider server using the osc/send-bundle function, and then sends a message indicating that the bundle has been sent to the channel.

The send-osc-bundle function is called with an OSC bundle and a new channel. The message indicating that the bundle has been sent is sent to this channel.

Meanwhile, the code proceeds to do other work, such as printing a message indicating that it's processing other stuff.

A separate core.async thread is created using the async/go macro. This thread waits for a message to be available on the channel using the async/<!! function. When the message is received, it prints a message indicating that the result is available.

To actually retrieve the value of the synth parameter, you would need to modify the send-osc-bundle function to include the appropriate OSC message to retrieve the value, and modify the callback function or message passing system to handle the response message and extract the value.
